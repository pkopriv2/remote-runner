#! /bin/bash

export rr_home=${rr_home:-$HOME/.rr}
export rr_host_home=${rr_host_home:-$rr_home/hosts}

IFS=$'\n'

source $rr_home/local/require.sh

declare -A globals
declare -A attributes

require "lib/login.sh"
require "lib/inet.sh"
require "lib/array.sh"
require "local/log.sh"
require "host.sh"
require "key.sh"
require "role.sh"
require "archive.sh"
require "fileserver.sh"

_runtime_env() {
	key() {
		key=${1:-"default"}
	}

	roles=()
	roles() {
		roles+=( $* )
	}

	attributes=()
	attr() {
		attributes+=(["$1"]=$2)
	}

	archives=()
	archives() {
		archives+=( $* )
	}

	if ! source $rr_host_home/$1.sh
	then
		fail "Error sourcing host file [$host]"
	fi

	unset -f key
	unset -f roles

	for role in "${roles[@]}"
	do
		if [[ ! -f $rr_role_home/$role.sh ]] 
		then
			fail "Unable to determine run list for host [$1].  Role [$role] does not exist."
		fi 

		if ! source $rr_role_home/$role.sh
		then 
			fail "Error sourcing role file [$role]: $err"
		fi
	done
	

	archives=( $(echo "${archives[*]}" | uniq) )
	roles=( $(echo "${roles[*]}" | uniq) )
}


_runtime_lib() {
	cat - <<-EOH
		server_ip=$(inet_src_ip "$(login_get_host $1)")
	EOH

	for key in "${!attributes[@]}"
	do
		echo "$key=${attributes[$key]}"
	done

	for key in "${!globals[@]}"
	do
		echo "$key=${globals[$key]}"
	done

	for script in $rr_home/remote/*.sh
	do
		cat $script
	done

	for script in $rr_home/lib/*.sh
	do
		cat $script
	done

	for script in $rr_home/dsl/*.sh
	do
		cat $script
	done
}

execute() {
	if [[ $# < 1 ]]
	then
		log_error "Must provide a host regexp."
		exit 1
	fi

	local host_list=( $( _host_match $1) )
	log_info "Hosts have expanded to: $(array_print "${host_list[@]}") "

	for host in "${host_list[@]}"
	do
		log_debug "Sourcing host environment: $host"

		(
			_runtime_env $host

			local key_file=$rr_key_home/id_rsa.$key
			if [[ ! -f $key_file ]] 
			then 
				log_error "That key file [$key_file] doesn't exist!"
				exit 1
			fi

			ssh-add $key_file 

			log_info "Runlist has expanded to: $(array_print ${archives[@]}) "

			for archive in "${archives[@]}"
			do
				log_info "Executing archive [$archive] on host [$host]"

				local archive_name=$(_archive_get_name $archive)
				local archive_script=$(_archive_get_script $archive)
				local script=$rr_archive_home/$archive_name/scripts/$archive_script.sh

				if [ ! -f $script ]
				then
					log_error "Unable to locate archive [$archive]"
					exit 1
				fi

				fileserver_start $rr_archive_home/$archive_name/files 

				{
					_runtime_lib $host $archive

					cat -<<-EOH
						archive_name=$archive_name
						archive_script=$archive_script
						roles=(${roles[*]})
					EOH
				} | ssh -t -i $key_file $host "cat - > /tmp/rr.sh"

				{
					echo -ne ". /tmp/rr.sh; $archive_name::$archive_script() { echo &> /dev/null;"
					cat $script
					echo "}; $archive_name::$archive_script;"
				} | ssh -t -i $key_file $host "bash /dev/stdin; rm /tmp/rr.sh"

				ret=$?

				fileserver_stop

				if [ $ret -ne 0 ]
				then
					exit 1
				fi
			done
		) || fail "Error executing host [$1] runlist."
	done
}

help() {
	log_error "Undefined"
}


args=($*)
action="${args[0]}"
shift

case "$action" in
	key|host|role|archive)
		"$action"_action "$@"
		;;
	help)
		help
		;;	
	*)
		execute "${args[@]}" 
		;;
esac
