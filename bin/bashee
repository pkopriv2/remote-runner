#! /bin/bash -e

set -o errexit

source ${rr_home:-$HOME/.rr}/local/require.sh

require "local/msg.sh"


# Processes an embedded bash file.  The command is executed
#
#
# Usage:
# 
# bashee /path/to/file

if [[ -z $1 ]] 
then
	error "Must provide a bashee file."
	exit 1
fi 

if [[ ! -f $1 ]] 
then
	error "Bashee file [$1] doesn't exist."
	exit 1 
fi 

tmp_dir=${tmp_dir:-/tmp}
if [[ ! -d $tmp_dir ]]
then
	error "That temporary directory [$tmp_dir] doesn't exist."
	exit 1
fi

tmp_file=$tmp_dir/bashee.tmp
if ! touch  $tmp_file &> /dev/null
then
	error "Unable to create tmp file."
	exit 1
fi 


delim=${bashee_delim:-"--"}

{
	while read line 
	do
		# is this the first line, and is it a bash cmd?
		if [[ -z $cmd ]] && ! echo $line | grep -q "^$delim"
		then
			cmd=false
			echo "cat - <<-EOF"
			echo $line | sed 's|\$|\\$|g'
			continue
		fi

		# is this the start or end of a bash cmd area?
		if echo $line | grep -q "^$delim"
		then 
			if [[ -z $cmd ]] || ! $cmd
			then
				echo "EOF"
				cmd=true
				continue
			fi

			echo "cat - <<-EOF"
			cmd=false
			continue
		fi

		if $cmd 
		then
			echo $line
		else
			echo $line | sed 's|\$|\\$|g'
		fi
			
	done < $1

	$cmd || echo "EOF" 

} | cat - > $tmp_file

# setup the error scenarios.
on_exit() {
	rm -fr /tmp/err.out
	rm -fr /tmp/bashee.tmp
	exit $1
}

on_error() {
	error "Error procesing template: $( cat /tmp/err.out )"
	on_exit 1
}

trap 'on_error' ERR
trap 'on_exit 0' EXIT INT

# source std in, it will be executed in this context
if ! test -t 0
then
	source /dev/stdin
fi

source $tmp_file 2> /dev/null && \
	exit 0 
